<?php

declare(strict_types=1);

use Lits\Config\AuthConfig;
use Lits\Config\DatabaseConfig;
use Lits\Config\FrameworkConfig;
use Lits\Config\LdapConfig;
use Lits\Config\MailConfig;
use Lits\Config\SessionConfig;
use Lits\Config\TemplateConfig;
use Lits\Config\UserConfig;
use Lits\Framework;

return function (Framework $framework): void {
    $settings = $framework->settings();

    assert($settings['framework'] instanceof FrameworkConfig);

    // Whether to enable debug information.
    // $settings['framework']->debug = false;

    // Path to log file to be generated by the application.
    // $settings['framework']->log = '';

    assert($settings['session'] instanceof SessionConfig);

    // Base64 encoded key with at least 32-bits of entropy. Required.
    // $settings['session']->key = '';

    // Seconds before a session will expire.
    // $settings['session']->expires = 3600;

    assert($settings['template'] instanceof TemplateConfig);

    // Path to cache directory, which must be writable.
    $settings['template']->cache = __DIR__ . DIRECTORY_SEPARATOR . 'cache';

    // Paths to search for template files.
    // $settings['template']->paths[] = '';

    // Name of the site.
    $settings['template']->site = 'Example';

    // HTML contact information for the site.
    // $settings['template']->contact = '';

    // Menu for the site.
    // $settings['template']->menu = [];

    assert($settings['database'] instanceof DatabaseConfig);

    // Type of database connection, either mysql or pgsql.
    $settings['database']->type = 'mysql';

    // Hostname of database connection.
    $settings['database']->host = 'localhost';

    // Port of database connection, may be left to default for database type.
    // $settings['database']->port = 3306;

    // Username for database connection.
    $settings['database']->username = 'auth';

    // Password for database connection.
    $settings['database']->password = 'password';

    // Database name for database connection.
    $settings['database']->name = 'auth';

    // Prefix for tables within the database, may be left to default for none.
    // $settings['database']->prefix = 'auth_';

    // Directory which contains migration files for the database.
    $settings['database']->migration = __DIR__ . DIRECTORY_SEPARATOR .
        'src' . DIRECTORY_SEPARATOR . 'Migration';

    assert($settings['auth'] instanceof AuthConfig);

    // Relative path to User Management for this server.
    $settings['auth']->url = '/user/';

    assert($settings['ldap'] instanceof LdapConfig);

    // Enable testing a password against an LDAP server.
    // $settings['ldap']->enabled = true;

    // Domain name of email addresses which can be tested.
    // $settings['ldap']->domain = 'example.edu';

    // Hostname of LDAP server to test against.
    // $settings['ldap']->host = 'ldap.example.edu';

    // Port number of LDAP server to test against.
    // $settings['ldap']->port = 389;

    // Enable START TLS for the connection to the LDAP server.
    // $settings['ldap']->start_tls = true;

    // Bind DN for LDAP server to test against.
    // $settings['ldap']->bind = 'uid=%s,ou=people,dc=example,dc=edu';

    assert($settings['mail'] instanceof MailConfig);

    // DSN for mail sending server. Must be specified for password change.
    $settings['mail']->dsn = 'smtp://smtp.example.edu:25';

    // Default from address for emails. Must be specified for password change.
    $settings['mail']->from = 'Example University Libraries <lib@example.edu>';

    assert($settings['user'] instanceof UserConfig);

    // A note to add to the index page for logged in users as HTML fragment.
    // $settings['user']->note_index = '';

    // A note to add to the change password request and email as HTML fragment.
    // $settings['user']->note_password = '';
};
